name: Deploy Conductor

on:
  workflow_call:
    outputs:
      conductor_url:
        description: "The URL of the deployed Conductor API"
        value: ${{ jobs.deploy-conductor.outputs.conductor_url }}

permissions:
  contents: read

env:
  CONDUCTOR_REPO: conductor-oss/conductor
  CONDUCTOR_BRANCH: main
  DOCKER_COMPOSE_FILE: docker/docker-compose.yaml
  CONDUCTOR_API_URL: "http://localhost:8080/api"

jobs:
  deploy-conductor:
    runs-on: ubuntu-latest
    outputs:
      conductor_url: ${{ env.CONDUCTOR_API_URL }}
    steps:
      - name: Checkout Conductor Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CONDUCTOR_REPO }}
          ref: ${{ env.CONDUCTOR_BRANCH }}
          path: conductor

      - name: Install Docker Compose
        run: |
          if ! command -v docker compose &> /dev/null; then
            echo "Installing Docker Compose..."
            mkdir -p ~/.docker/cli-plugins/
            curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
            
            if ! command -v docker compose &> /dev/null; then
              echo "ERROR: Failed to install Docker Compose"
              exit 1
            fi
          fi
          
          echo "Docker Compose version:"
          docker compose version

      - name: Start Conductor Services
        working-directory: conductor
        run: |
          # Ensure no stale containers
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down --volumes --remove-orphans
          
          # Start services
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d
          
          if ! docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps --services | grep -q "conductor-server"; then
            echo "ERROR: Failed to start conductor-server"
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs
            exit 1
          fi

      - name: Wait for Conductor to be ready
        working-directory: conductor
        run: |
          echo "Waiting for services to initialize..."
          sleep 30
          
          if ! docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps | grep -q "healthy"; then
            echo "ERROR: Services are not healthy"
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs
            exit 1
          fi
          
          timeout=200
          until (curl -s ${{ env.CONDUCTOR_API_URL }}/health > /dev/null 2>&1) || [ $timeout -le 0 ]; do
            if [ $((timeout % 30)) -eq 0 ]; then
              echo "Services status (${timeout}s remaining):"
              docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps
              docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs --tail=20 conductor-server
            fi
            
            echo "Waiting for API... (${timeout}s remaining)"
            sleep 10
            timeout=$((timeout-10))
          done
          
          if [ $timeout -le 0 ]; then
            echo "ERROR: Conductor API failed to become healthy"
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs conductor-server
            exit 1
          fi
          
          # Verify API is responding correctly
          if ! curl -s ${{ env.CONDUCTOR_API_URL }}/health | grep -q "UP"; then
            echo "ERROR: Conductor API health check failed"
            curl -v ${{ env.CONDUCTOR_API_URL }}/health
            exit 1
          fi
          
          echo "SUCCESS: Conductor API is ready at ${{ env.CONDUCTOR_API_URL }}!"

      - name: Cleanup on Failure
        if: failure()
        working-directory: conductor
        run: docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down --volumes 