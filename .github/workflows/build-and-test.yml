name: Build and Test

on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: SdkTestAutomation.sln
  CONFIGURATION: Release
  CONDUCTOR_SERVER_URL: "http://localhost:8127/api"

permissions:
  contents: read
  checks: write

jobs:
  deploy-conductor:
    uses: ./.github/workflows/deploy-conductor.yml

  test:
    needs: [deploy-conductor]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore NuGet Packages
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build Solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Check Test Output Directory
      run: ls -la "SdkTestAutomation.Tests/bin/${{ env.CONFIGURATION }}/net8.0/"

    - name: Create Test Results Directory
      run: mkdir -p TestResults

    - name: Run Tests
      id: test-run
      run: |
        ./SdkTestAutomation.Tests/bin/${{ env.CONFIGURATION }}/net8.0/SdkTestAutomation.Tests -reporter default -html TestResults/test-results.html 2>&1
      continue-on-error: true

    - name: Parse and Report Test Results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let summary = '';
          
          try {
            // Since we can't easily access the previous step's output, let's provide a basic summary
            // and rely on the HTML report for detailed information
            console.log('## Test Results Summary');
            console.log('Tests have been executed and results are available in the HTML report.');
            
            // Check if HTML report exists
            const htmlPath = path.join(process.env.GITHUB_WORKSPACE, 'TestResults', 'test-results.html');
            if (fs.existsSync(htmlPath)) {
              const htmlContent = fs.readFileSync(htmlPath, 'utf8');
              
              // Try to extract basic info from HTML content
              const totalMatch = htmlContent.match(/Total[^>]*>(\d+)</i);
              const failedMatch = htmlContent.match(/Failed[^>]*>(\d+)</i);
              const passedMatch = htmlContent.match(/Passed[^>]*>(\d+)</i);
              const skippedMatch = htmlContent.match(/Skipped[^>]*>(\d+)</i);
              
              const totalTests = totalMatch ? parseInt(totalMatch[1]) : 0;
              const failedTests = failedMatch ? parseInt(failedMatch[1]) : 0;
              const passedTests = passedMatch ? parseInt(passedMatch[1]) : 0;
              const skippedTests = skippedMatch ? parseInt(skippedMatch[1]) : 0;
              
              if (totalTests > 0) {
                console.log(`- Total: ${totalTests}`);
                console.log(`- Passed: ${passedTests}`);
                console.log(`- Failed: ${failedTests}`);
                console.log(`- Skipped: ${skippedTests}`);
                
                // Add to job summary
                summary += `## Test Results Summary\n\n`;
                summary += `| Metric | Count |\n`;
                summary += `|--------|-------|\n`;
                summary += `| Total | ${totalTests} |\n`;
                summary += `| Passed | ${passedTests} |\n`;
                summary += `| Failed | ${failedTests} |\n`;
                summary += `| Skipped | ${skippedTests} |\n\n`;
                
                if (failedTests > 0) {
                  console.log('\n## Failed Tests');
                  summary += `## Failed Tests\n\n`;
                  summary += `‚ö†Ô∏è **${failedTests} test(s) failed**\n\n`;
                  summary += `Please check the HTML test report for detailed failure information.\n\n`;
                }
                
                // Set output for other steps
                core.setOutput('total-tests', totalTests);
                core.setOutput('passed-tests', passedTests);
                core.setOutput('failed-tests', failedTests);
                core.setOutput('skipped-tests', skippedTests);
              } else {
                console.log('Could not extract test statistics from HTML report.');
                summary += `## Test Results\n\nTests executed successfully. Please check the HTML report for detailed results.\n\n`;
              }
            } else {
              console.log('HTML test report not found.');
              summary += `## Test Results\n\nTests executed but HTML report was not generated.\n\n`;
            }
            
            // Add link to HTML report
            if (fs.existsSync(htmlPath)) {
              summary += `## üìä Test Report\n\n`;
              summary += `üìÑ **HTML Test Report**: Download the test results artifact to view the detailed HTML report.\n\n`;
              summary += `The HTML report contains detailed information about test execution, including:\n`;
              summary += `- Individual test results and execution times\n`;
              summary += `- Failure details and stack traces\n`;
              summary += `- Test output and logs\n`;
              summary += `- Performance metrics\n\n`;
            }
            
          } catch (error) {
            const message = `Error parsing test results: ${error.message}`;
            console.log('## Test Results');
            console.log(message);
            console.log('Tests executed using xUnit v3 console runner');
            summary += `## Test Results\n\n${message}\n\nTests executed using xUnit v3 console runner.\n`;
          }
          
          // Add to job summary
          await core.summary
            .addRaw(summary)
            .write();

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults
        if-no-files-found: warn