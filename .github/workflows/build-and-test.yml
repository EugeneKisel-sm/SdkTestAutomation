name: Build and Test

on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: SdkTestAutomation.sln
  CONFIGURATION: Release
  CONDUCTOR_SERVER_URL: "http://localhost:8080/api"
  CONDUCTOR_REPO: conductor-oss/conductor
  DOCKER_COMPOSE_FILE: docker/docker-compose.yaml

permissions:
  contents: read
  checks: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Solution
      run: |
        dotnet restore ${{ env.SOLUTION_FILE }}
        dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Checkout Conductor Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.CONDUCTOR_REPO }}
        ref: main
        path: conductor

    - name: Start Conductor Services
      working-directory: conductor
      run: |
        docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d
        
        echo "Waiting for services to initialize..."
        timeout=200
        while [ $timeout -gt 0 ]; do
          if docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps | grep -q "healthy"; then
            if curl -s ${{ env.CONDUCTOR_SERVER_URL }}/health > /dev/null 2>&1; then
              echo "SUCCESS: Conductor API is ready!"
              exit 0
            fi
          fi
          
          if [ $((timeout % 30)) -eq 0 ]; then
            echo "Services status (${timeout}s remaining):"
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs --tail=20 conductor-server
          fi
          
          echo "Waiting for API... (${timeout}s remaining)"
          sleep 10
          timeout=$((timeout-10))
        done
        
        echo "ERROR: Conductor API failed to become healthy"
        docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps
        docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs conductor-server
        exit 1

    - name: Run Tests
      id: test-run
      run: |
        mkdir -p TestResults
        ./SdkTestAutomation.Tests/bin/${{ env.CONFIGURATION }}/net8.0/SdkTestAutomation.Tests \
          -html TestResults/test-results.html \
          -trx TestResults/test-results.trx \
          -jUnit TestResults/test-results.xml \
          -xml TestResults/test-results.xunit.xml 2>&1
      continue-on-error: true

    - name: Publish Test Results (TRX)
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Test Results (TRX)
        path: TestResults/test-results.trx
        reporter: dotnet-trx
        fail-on-error: false

    - name: Publish Test Results (JUnit)
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Test Results (JUnit)
        path: TestResults/test-results.xml
        reporter: java-junit
        fail-on-error: false

    - name: Publish Test Results (xUnit)
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Test Results (xUnit)
        path: TestResults/test-results.xunit.xml
        reporter: dotnet-xunit
        fail-on-error: false

    - name: Display Test Report List
      if: always()
      run: |
        echo "# Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“Š Test reports available in:" >> $GITHUB_STEP_SUMMARY
        echo "- HTML: Rich interactive report" >> $GITHUB_STEP_SUMMARY
        echo "- TRX: Native .NET test results" >> $GITHUB_STEP_SUMMARY
        echo "- JUnit: Standard XML format" >> $GITHUB_STEP_SUMMARY
        echo "- xUnit: xUnit.net v2 XML format" >> $GITHUB_STEP_SUMMARY

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults
        if-no-files-found: warn

    - name: Cleanup Conductor
      if: always()
      working-directory: conductor
      run: docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down