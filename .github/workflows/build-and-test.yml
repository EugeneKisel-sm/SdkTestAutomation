name: Build and Test

on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: SdkTestAutomation.sln
  CONFIGURATION: Release
  CONDUCTOR_SERVER_URL: "http://localhost:8080/api"

permissions:
  contents: read
  checks: write

jobs:
  deploy-conductor:
    uses: ./.github/workflows/deploy-conductor.yml

  test:
    needs: [deploy-conductor]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore NuGet Packages
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build Solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Check Test Output Directory
      run: ls -la "SdkTestAutomation.Tests/bin/${{ env.CONFIGURATION }}/net8.0/"

    - name: Create Test Results Directory
      run: mkdir -p TestResults

    - name: Run Tests
      id: test-run
      run: |
        ./SdkTestAutomation.Tests/bin/${{ env.CONFIGURATION }}/net8.0/SdkTestAutomation.Tests -reporter default -html TestResults/test-results.html
      continue-on-error: true

    - name: Parse and Report Test Results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let summary = '';
          
          try {
            // Get the test run output from the previous step
            const testOutput = '${{ steps.test-run.outputs.stdout }}';
            
            // Parse the test execution summary from console output
            const summaryMatch = testOutput.match(/=== TEST EXECUTION SUMMARY ===\s*\n\s*([^\n]+)\s+Total:\s*(\d+),\s*Errors:\s*(\d+),\s*Failed:\s*(\d+),\s*Skipped:\s*(\d+),\s*Not Run:\s*(\d+),\s*Time:\s*([^\s]+)/);
            
            if (summaryMatch) {
              const assemblyName = summaryMatch[1].trim();
              const totalTests = parseInt(summaryMatch[2]);
              const errors = parseInt(summaryMatch[3]);
              const failedTests = parseInt(summaryMatch[4]);
              const skippedTests = parseInt(summaryMatch[5]);
              const notRun = parseInt(summaryMatch[6]);
              const executionTime = summaryMatch[7];
              const passedTests = totalTests - failedTests - skippedTests - errors;
              
              console.log('## Test Results Summary');
              console.log(`- Assembly: ${assemblyName}`);
              console.log(`- Total: ${totalTests}`);
              console.log(`- Passed: ${passedTests}`);
              console.log(`- Failed: ${failedTests}`);
              console.log(`- Errors: ${errors}`);
              console.log(`- Skipped: ${skippedTests}`);
              console.log(`- Not Run: ${notRun}`);
              console.log(`- Execution Time: ${executionTime}`);
              
              // Add to job summary
              summary += `## Test Results Summary\n\n`;
              summary += `| Metric | Count |\n`;
              summary += `|--------|-------|\n`;
              summary += `| Assembly | ${assemblyName} |\n`;
              summary += `| Total | ${totalTests} |\n`;
              summary += `| Passed | ${passedTests} |\n`;
              summary += `| Failed | ${failedTests} |\n`;
              summary += `| Errors | ${errors} |\n`;
              summary += `| Skipped | ${skippedTests} |\n`;
              summary += `| Not Run | ${notRun} |\n`;
              summary += `| Execution Time | ${executionTime} |\n\n`;
              
              if (failedTests > 0 || errors > 0) {
                console.log('\n## Failed Tests');
                summary += `## Failed Tests\n\n`;
                summary += `‚ö†Ô∏è **${failedTests + errors} test(s) failed**\n\n`;
                summary += `Please check the HTML test report for detailed failure information.\n\n`;
              }
              
              // Add link to HTML report
              const htmlPath = path.join(process.env.GITHUB_WORKSPACE, 'TestResults', 'test-results.html');
              if (fs.existsSync(htmlPath)) {
                summary += `## üìä Test Report\n\n`;
                summary += `üìÑ **HTML Test Report**: Download the test results artifact to view the detailed HTML report.\n\n`;
                summary += `The HTML report contains detailed information about test execution, including:\n`;
                summary += `- Individual test results and execution times\n`;
                summary += `- Failure details and stack traces\n`;
                summary += `- Test output and logs\n`;
                summary += `- Performance metrics\n\n`;
              }
              
              // Set output for other steps
              core.setOutput('total-tests', totalTests);
              core.setOutput('passed-tests', passedTests);
              core.setOutput('failed-tests', failedTests);
              core.setOutput('skipped-tests', skippedTests);
              core.setOutput('errors', errors);
              
            } else {
              const message = 'Could not parse test execution summary from console output.';
              console.log('## Test Results');
              console.log(message);
              summary += `## Test Results\n\n${message}\n`;
            }
          } catch (error) {
            const message = `Error parsing test results: ${error.message}`;
            console.log('## Test Results');
            console.log(message);
            console.log('Tests executed using xUnit v3 console runner');
            summary += `## Test Results\n\n${message}\n\nTests executed using xUnit v3 console runner.\n`;
          }
          
          // Add to job summary
          await core.summary
            .addRaw(summary)
            .write();

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults
        if-no-files-found: warn