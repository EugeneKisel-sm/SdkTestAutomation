name: Build and Test

on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: SdkTestAutomation.sln
  CONFIGURATION: Release
  CONDUCTOR_API_URL: "http://localhost:8080/api"

permissions:
  contents: read
  checks: write

jobs:
  deploy-conductor:
    uses: ./.github/workflows/deploy-conductor.yml

  test:
    needs: [deploy-conductor]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore NuGet Packages
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build Solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Check Test Output Directory
      run: ls -la "SdkTestAutomation.Tests/bin/${{ env.CONFIGURATION }}/net8.0/"

    - name: Create Test Results Directory
      run: mkdir -p TestResults

    - name: Run Tests
      id: test-run
      run: >
        ./SdkTestAutomation.Tests/bin/${{ env.CONFIGURATION }}/net8.0/SdkTestAutomation.Tests
        -json TestResults/test-results.json

    - name: Parse and Report Test Results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let summary = '';
          
          try {
            const jsonPath = path.join(process.env.GITHUB_WORKSPACE, 'TestResults', 'test-results.json');
            
            if (fs.existsSync(jsonPath)) {
              const jsonContent = fs.readFileSync(jsonPath, 'utf8');
              const testResults = JSON.parse(jsonContent);
              
              // Extract test statistics
              let totalTests = 0;
              let passedTests = 0;
              let failedTests = 0;
              let skippedTests = 0;
              const failedTestNames = [];
              
              // Parse the JSON structure to count tests
              if (testResults && Array.isArray(testResults)) {
                testResults.forEach(result => {
                  if (result.$type === 'test-finished') {
                    totalTests++;
                    if (result.TestsFailed > 0) {
                      failedTests++;
                      // Try to get the test name from the test case
                      if (result.TestDisplayName) {
                        failedTestNames.push(result.TestDisplayName);
                      }
                    } else if (result.TestsSkipped > 0) {
                      skippedTests++;
                    } else {
                      passedTests++;
                    }
                  }
                });
              }
              
              console.log('## Test Results Summary');
              console.log(`- Total: ${totalTests}`);
              console.log(`- Passed: ${passedTests}`);
              console.log(`- Failed: ${failedTests}`);
              console.log(`- Skipped: ${skippedTests}`);
              
              // Add to job summary
              summary += `## Test Results Summary\n\n`;
              summary += `| Metric | Count |\n`;
              summary += `|--------|-------|\n`;
              summary += `| Total | ${totalTests} |\n`;
              summary += `| Passed | ${passedTests} |\n`;
              summary += `| Failed | ${failedTests} |\n`;
              summary += `| Skipped | ${skippedTests} |\n\n`;
              
              if (failedTests > 0) {
                console.log('\n## Failed Tests');
                summary += `## Failed Tests\n\n`;
                
                failedTestNames.forEach(testName => {
                  console.log(`- ${testName}`);
                  summary += `### ${testName}\n`;
                });
              }
              
              // Set output for other steps
              core.setOutput('total-tests', totalTests);
              core.setOutput('passed-tests', passedTests);
              core.setOutput('failed-tests', failedTests);
              core.setOutput('skipped-tests', skippedTests);
              
            } else {
              const message = 'JSON test result file not found. Tests may not have executed or JSON output was not generated.';
              console.log('## Test Results');
              console.log(message);
              summary += `## Test Results\n\n${message}\n`;
            }
          } catch (error) {
            const message = `Error parsing JSON test result file: ${error.message}`;
            console.log('## Test Results');
            console.log(message);
            console.log('Tests executed using xUnit v3 console runner');
            summary += `## Test Results\n\n${message}\n\nTests executed using xUnit v3 console runner.\n`;
          }
          
          // Add to job summary
          await core.summary
            .addRaw(summary)
            .write();

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults
        if-no-files-found: warn